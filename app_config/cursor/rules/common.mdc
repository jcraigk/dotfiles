---
description: Rules to apply to all projects
globs: ["**/*"]
alwaysApply: true
---

# Git

ALWAYS ask before running `git commit`.

Commit messages must be a single line, 20–80 characters, in imperative mood.

Branch names must be 5–25 characters, using only lowercase letters and dashes.

Pull request (PR) titles and descriptions must be concise and imperative. PR descriptions must not exceed 300 words.

When updating a PR, preserve any attachments or images the user may have added outside of chat.


# Terminal

Do not run `cd` into the current project directory—you’re already there.

Do not run `rails console`. Use `rails runner` instead.


# Coding Style

NEVER add comments to generated code unless there is a clear, justifiable reason. Good code speaks for itself.


# Special Commands

Special commands are short, single words (like bash commands) that begin a chat message. They may be followed by a brief string (≤250 characters), parsed as an optional argument. Commands and their instructions:

<command name="gc" arg="Branch name">
1. If the current branch is "main", checkout a new branch. If no arg is specified, generate the branch name.
2. git commit. If there are pre-commit hook failures, iterate and fix them.
</command>

<command name="gp" arg="Branch name">
1. Run the "gc" command
2. git push
3. Check if there's a pull request associated with the branch already and, if so, update the PR description and title if they don't already reflect the latest changes. If there is no PR, do not create one.
</command>

<command name="gpr" arg="PR title">
1. Run the "gp" command but at step 3 create a PR if one doesn't already exist. 
</command>

<command name="greview" arg="Pull request number or branch name">
1. Retrieve info for the PR provided (either by number or branch name). If no PR specified, infer from the current branch.
2. Checkout the associated branch if not already in it.
3. Perform a comprehensive review and respond with the results in chat. Do not create an actual PR review.
</command>
